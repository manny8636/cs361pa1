--- ../stringmodel.c	2022-02-15 14:30:37.406906114 -0500
+++ ckstyle/stringmodel.c.gnu	2022-02-15 14:30:59.459112539 -0500
@@ -1,8 +1,8 @@
+#include <assert.h>
 #include <stdbool.h>
-#include <stdlib.h>
 #include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
-#include <assert.h>
 
 #include "statemodel.h"
 #include "stringmodel.h"
@@ -21,7 +21,7 @@
 {
   fsm_t *fsm = calloc (1, sizeof (fsm_t));
   fsm->nevents = NSTR_EVENTS;
-  fsm->state = STR_INIT;  
+  fsm->state = STR_INIT;
   fsm->transition = &parse_transition;
   fsm->input = input;
   fsm->current = input;
@@ -42,19 +42,19 @@
 // printf ("SYNTAX ERROR: '%c%c' is not a valid escape code\n",
 static state_t const _transitions[NSTR_STATES][NSTR_EVENTS] = {
   // OPEN_QUOTE CLOSE_QUOTE NON_CTRL BACKSLASH ESC_CHAR NO_ESC
-  { BUILDING, NON_STR, NON_STR, NON_STR, NON_STR, NON_STR }, // STR_INIT
+  { BUILDING, NON_STR, NON_STR, NON_STR, NON_STR, NON_STR },   // STR_INIT
   { NON_STR, STR_FINISH, BUILDING, ESCAPE, NON_STR, NON_STR }, // BUILDING
   { NON_STR, NON_STR, NON_STR, NON_STR, BUILDING, STR_ERROR }, // ESCAPE
-  { NON_STR, NON_STR, NON_STR, NON_STR, NON_STR, NON_STR }, // STR_FINISH
-  { NON_STR, NON_STR, NON_STR, NON_STR, NON_STR, NON_STR }  // STR_ERROR
+  { NON_STR, NON_STR, NON_STR, NON_STR, NON_STR, NON_STR },    // STR_FINISH
+  { NON_STR, NON_STR, NON_STR, NON_STR, NON_STR, NON_STR }     // STR_ERROR
 };
 static action_t const _effect[NSTR_STATES][NSTR_EVENTS] = {
   // OPEN_QUOTE CLOSE_QUOTE NON_CTRL BACKSLASH ESC_CHAR NO_ESC
-  { AllocateBuffer, NULL, NULL, NULL, NULL, NULL }, // STR_INIT
+  { AllocateBuffer, NULL, NULL, NULL, NULL, NULL },            // STR_INIT
   { NULL, AdvancePointer, AppendCharacter, NULL, NULL, NULL }, // BUILDING
-  { NULL, NULL, NULL, NULL, ReplaceCharacter, SyntaxError }, // ESCAPE
-  { NULL, NULL, NULL, NULL, NULL, NULL }, // STR_FINISH
-  { NULL, NULL, NULL, NULL, NULL, NULL }  // STR_ERROR
+  { NULL, NULL, NULL, NULL, ReplaceCharacter, SyntaxError },   // ESCAPE
+  { NULL, NULL, NULL, NULL, NULL, NULL },                      // STR_FINISH
+  { NULL, NULL, NULL, NULL, NULL, NULL }                       // STR_ERROR
 };
 
 // static action_t const _entryArr[NSTR_STATES] =
@@ -66,8 +66,8 @@
 static void
 AdvancePointer (fsm_t *fsm)
 {
-   assert (fsm != NULL);
-   fsm->current++;
+  assert (fsm != NULL);
+  fsm->current++;
 }
 
 /* Create a dynamically allocated buffer for storing the string as it is
@@ -76,46 +76,47 @@
 static void
 AllocateBuffer (fsm_t *fsm)
 {
-   assert (fsm != NULL);
-   // fsm->buffer_size = strlen(fsm->input) + 1;
-   // fsm->buffer = (char *)calloc(fsm->buffer_size, sizeof(char));
-   // fsm->length = 0;
-   memset (fsm->buffer, 0, sizeof (fsm->buffer));
-   fsm->length = 0;
+  assert (fsm != NULL);
+  // fsm->buffer_size = strlen(fsm->input) + 1;
+  // fsm->buffer = (char *)calloc(fsm->buffer_size, sizeof(char));
+  // fsm->length = 0;
+  memset (fsm->buffer, 0, sizeof (fsm->buffer));
+  fsm->length = 0;
 }
 
 /* Append a character from the current string to a buffer */
 static void
 AppendCharacter (fsm_t *fsm)
 {
-   assert (fsm != NULL);
-   // assert (fsm->length < BUFFER_LENGTH - 1);
-   fsm->buffer[fsm->length++] = *fsm->current;
+  assert (fsm != NULL);
+  // assert (fsm->length < BUFFER_LENGTH - 1);
+  fsm->buffer[fsm->length++] = *fsm->current;
 }
 
 /* Replaces a control sequence (\\ or \") by putting just the
    latter character into the buffer */
 static void
-ReplaceCharacter(fsm_t *fsm)
+ReplaceCharacter (fsm_t *fsm)
 {
-   // assert(fsm->length < fsm->buffer_size - 1);
-   fsm->buffer[fsm->length - 1] = *fsm->current;
+  // assert(fsm->length < fsm->buffer_size - 1);
+  fsm->buffer[fsm->length - 1] = *fsm->current;
 }
 
 /* Given FSM instance and event, perform the table lookups */
 static state_t
-parse_transition(fsm_t *fsm, event_t event, action_t *effect, action_t *entry)
+parse_transition (fsm_t *fsm, event_t event, action_t *effect, action_t *entry)
 {
   if (fsm->state >= NON_STR || _transitions[fsm->state][event] == NON_STR)
-      return -1;
+    return -1;
   *effect = _effect[fsm->state][event];
   state_t next = _transitions[fsm->state][event];
-  return next;;
+  return next;
+  ;
 }
 
 /* Reports an invalid escape-code character */
 static void
 SyntaxError (fsm_t *fsm)
 {
-   printf ("SYNTAX ERROR: '\\%c' is not a valid escape code\n", *fsm->current);
+  printf ("SYNTAX ERROR: '\\%c' is not a valid escape code\n", *fsm->current);
 }
