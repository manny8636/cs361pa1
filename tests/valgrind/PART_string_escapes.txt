<<<<<<< HEAD
==146625== Memcheck, a memory error detector
==146625== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==146625== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==146625== Command: ../json -s ../data/string_escapes.txt
==146625== 
==146625== Invalid read of size 1
==146625==    at 0x483EF54: strlen (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==146625==    by 0x109794: AllocateBuffer (stringmodel.c:86)
==146625==    by 0x1096B5: handle_event (statemodel.c:26)
==146625==    by 0x109A7F: accept_string (parser.c:56)
==146625==    by 0x10945D: main (main.c:79)
==146625==  Address 0x4a582d2 is 0 bytes after a block of size 50 alloc'd
==146625==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==146625==    by 0x1093D0: main (main.c:55)
==146625== 
==146625== Invalid read of size 1
==146625==    at 0x109858: ReplaceCharacter (stringmodel.c:108)
==146625==    by 0x1096B5: handle_event (statemodel.c:26)
==146625==    by 0x109A7F: accept_string (parser.c:56)
==146625==    by 0x10945D: main (main.c:79)
==146625==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==146625== 
==146625== 
==146625== Process terminating with default action of signal 11 (SIGSEGV)
==146625==  Access not within mapped region at address 0x0
==146625==    at 0x109858: ReplaceCharacter (stringmodel.c:108)
==146625==    by 0x1096B5: handle_event (statemodel.c:26)
==146625==    by 0x109A7F: accept_string (parser.c:56)
==146625==    by 0x10945D: main (main.c:79)
==146625==  If you believe this happened as a result of a stack
==146625==  overflow in your program's main thread (unlikely but
==146625==  possible), you can try to increase the size of the
==146625==  main thread stack using the --main-stacksize= flag.
==146625==  The main thread stack size used in this run was 8388608.
==146625== 
==146625== HEAP SUMMARY:
==146625==     in use at exit: 197 bytes in 3 blocks
==146625==   total heap usage: 5 allocs, 2 frees, 8,861 bytes allocated
==146625== 
==146625== LEAK SUMMARY:
==146625==    definitely lost: 0 bytes in 0 blocks
==146625==    indirectly lost: 0 bytes in 0 blocks
==146625==      possibly lost: 0 bytes in 0 blocks
==146625==    still reachable: 197 bytes in 3 blocks
==146625==         suppressed: 0 bytes in 0 blocks
==146625== Rerun with --leak-check=full to see details of leaked memory
==146625== 
==146625== For lists of detected and suppressed errors, rerun with: -s
==146625== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
=======
==149590== Memcheck, a memory error detector
==149590== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==149590== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==149590== Command: ../json -s ../data/string_escapes.txt
==149590== 
==149590== Invalid write of size 1
==149590==    at 0x10990C: AppendCharacter (stringmodel.c:98)
==149590==    by 0x109697: handle_event (statemodel.c:26)
==149590==    by 0x109AE2: accept_string (parser.c:63)
==149590==    by 0x1093B0: main (main.c:61)
==149590==  Address 0x4a583fa is 6 bytes before an unallocated block of size 4,185,056 in arena "client"
==149590== 
==149590== Invalid write of size 1
==149590==    at 0x10996C: ReplaceCharacter (stringmodel.c:108)
==149590==    by 0x109697: handle_event (statemodel.c:26)
==149590==    by 0x109AB7: accept_string (parser.c:53)
==149590==    by 0x1093B0: main (main.c:61)
==149590==  Address 0x4a58401 is 1 bytes inside an unallocated block of size 4,185,056 in arena "client"
==149590== 
STRING: 'This "is" okay to do. He…'
Success!
==149590== 
==149590== HEAP SUMMARY:
==149590==     in use at exit: 472 bytes in 1 blocks
==149590==   total heap usage: 6 allocs, 5 frees, 17,090 bytes allocated
==149590== 
==149590== LEAK SUMMARY:
==149590==    definitely lost: 0 bytes in 0 blocks
==149590==    indirectly lost: 0 bytes in 0 blocks
==149590==      possibly lost: 0 bytes in 0 blocks
==149590==    still reachable: 472 bytes in 1 blocks
==149590==         suppressed: 0 bytes in 0 blocks
==149590== Rerun with --leak-check=full to see details of leaked memory
==149590== 
==149590== For lists of detected and suppressed errors, rerun with: -s
==149590== ERROR SUMMARY: 19 errors from 2 contexts (suppressed: 0 from 0)
>>>>>>> 149606adc8b3f0cb79ed9f7c590375c37f62be46
